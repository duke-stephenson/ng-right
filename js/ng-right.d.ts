// Generated by dts-bundle v0.3.0

declare module 'ng-right' {
    export * from '__ng-right/bindings';
    export * from '__ng-right/directives';
    export * from '__ng-right/services';
    export * from '__ng-right/inject';
    export * from '__ng-right/state';
    export * from '__ng-right/bootstrap';
    export { autoinject } from '__ng-right/utils';
}

declare module '__ng-right/bindings' {
    export function bindString(targetOrKey: any | string, keyOrNothing?: string): any;
    export function bindTwoWay(targetOrOptions: any | lib.BindTwoWayOptions, keyOrNothing?: string): (target: any, propertyName: string) => void;
    export function bindExpression(targetOrKey: any | string, keyOrNothing?: string): (target: any, propertyName: string) => void;
    export function bindOneWay(targetOrKey: any | string, keyOrNothing?: string): (target: any, propertyName: string) => void;
}

declare module '__ng-right/directives' {
    export function Component(config: lib.DirectiveConfig): (constructor: lib.ControllerClass) => void;
    export function Attribute(config: lib.DirectiveConfig): (constructor: lib.ControllerClass) => void;
}

declare module '__ng-right/services' {
    export function Service(config: lib.ServiceConfig): (constructor: Function) => void;
    export function Ambient(configOrClass: any): any;
    export function Controller(config: lib.ControllerConfig): (constructor: Function) => void;
}

declare module '__ng-right/inject' {
    export function Inject(config: lib.InjectConfig): (target: lib.ControllerClass) => lib.ControllerClass;
}

declare module '__ng-right/state' {
    export function State(options: angular.ui.IState): (target: lib.StateClass) => lib.StateClass;
}

declare module '__ng-right/bootstrap' {
    export function Bootstrap(options: lib.OptionsConfig): (target: lib.StateClass) => void;
}

declare module '__ng-right/utils' {
    export const options: {
        module: ng.IModule;
        makeTemplateUrl(elementName: string): string;
    };
    export function getModule(): ng.IModule;
    export function getCtrlAs(config: lib.DirectiveConfig): string;
    export function setOptions(opts: lib.OptionsConfig): void;
    export var autoinjectKey: any;
    export var scopeKey: any;
    export function kebabCase(name: string): string;
    export function camelCase(name: string): string;
    export function zipObject<T>(one: string[], other: T[]): {
        [key: string]: T;
    };
    export function cloneFunction(func: Function): (...args: any[]) => any;
    export function randomString(): string;
    export function autoinject(target: any, propertyName: string): void;
    export function assert(ok: boolean | number, ...args: string[]): void;
}

